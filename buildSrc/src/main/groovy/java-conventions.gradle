// Add plugins for internal modules
plugins {
    id 'java'
}

// Create classifier extension to give the artifact name the project's base name
abstract class ClassifierExtension {
    abstract Property<String> getId()
    abstract Property<String> getImplVersion()
}

// Set project information
group = project.userGroup
version = project.projectVersion
def extension = project.extensions.create('classifier', ClassifierExtension)
afterEvaluate {
    archivesBaseName = project.projectBaseName + (!extension.id.get().isEmpty() ? "-${extension.id.get()}" : '')
    // Set manifest attributes
    jar {
        manifest.attributes([
                'Specification-Title': project.projectName,
                'Specification-Vendor': project.userName,
                'Specification-Version': project.projectVersion,
                'Implementation-Title': project.projectName,
                'Implementation-Vendor': project.userName,
                'Implementation-Version': extension.implVersion.get(),
                'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
        ])
    }
}

// Set toolchain to compile against current JDK
java {
    withSourcesJar()
    withJavadocJar()

    toolchain {
        languageVersion = JavaLanguageVersion.of(project.jdkVersion)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

// Add maven central to grab dependencies
repositories {
    mavenCentral()
}

// Set tests to use junit
test {
    useJUnitPlatform()
}

// Add test dependencies
dependencies {
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: project.junitVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: project.junitVersion
}

// Set compiler options
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
}
